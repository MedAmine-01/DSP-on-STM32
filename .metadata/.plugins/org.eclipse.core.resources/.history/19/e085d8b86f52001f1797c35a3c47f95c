/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"
#include "signals.h"
#include "uart.h"
#include <stdio.h>



#define GPIOAEN			(1U<<0)
#define PIN5			(1U<<5)
#define LED_PIN			PIN5

#define MA_FLTR_PTS		11


extern float _5hz_signal[HZ_5_SIG_LEN];
extern float32_t inputSignal_f32_1kHz_15kHz[KHZ1_15_SIG_LEN];

float before, after;

float filtered_sig[KHZ1_15_SIG_LEN];




static void plot_input_signal(void);
static void pseudo_delay(void);

static void moving_average(float32_t *source, float32_t *destination, uint32_t length, uint32_t filter_pts);

int main(void)
{
	//Enable Floating Point Unit
	SCB->CPACR |= ((3UL<<20)| (3UL<<22));	//full access to cp11 and cp10 (refer to cortex user guide (fpu))

	moving_average(inputSignal_f32_1kHz_15kHz, filtered_sig	, KHZ1_15_SIG_LEN, MA_FLTR_PTS);
	uart2_tx_init();
	while(1){
		//printf("Hello from STM32\n\r");
		plot_input_signal();
	}
}
static void plot_input_signal(void){
	for(int i=0;i< KHZ1_15_SIG_LEN ;i++){
		before=inputSignal_f32_1kHz_15kHz[i];
		after=filtered_sig[i];
		printf("%f,",before);
		printf("%f\n\r",after);
		pseudo_delay();
	}
}

static void moving_average(float32_t *source, float32_t *destination, uint32_t length, uint32_t filter_pts){
	int div2=floor(filter_pts/2);
	for(int i=div2;i<length-div2-1;i++){
		destination[i]=0;
		for(int j= -div2;j<div2;j++){
			destination[i]+=source[i+j];
		}
		destination[i]/=filter_pts;
	}
}

static void pseudo_delay(void){
	 for(int i=0;i <100000; i++){

	 }
}




